% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{class}
\name{running}
\alias{finished}
\alias{finished,msgfAsync-method}
\alias{import}
\alias{import,msgfAsync-method}
\alias{msgfAsync-class}
\alias{running}
\alias{running,msgfAsync-method}
\title{A class referencing an asynchronous execution of MS-GF+}
\usage{
running(object)

finished(object)

import(object)

\S4method{running}{msgfAsync}(object)

\S4method{finished}{msgfAsync}(object)

\S4method{import}{msgfAsync}(object)
}
\arguments{
\item{object}{An msgfAsync object}
}
\value{
\code{running(object)} Returns a logical indicating if the process
is running

\code{finished(object)} Returns a logical indicating if the process
is finished

\code{import(object)} Returns an mzID object or NULL if the process
is still running. Throws an error if the process is finished but the result
file doesn't exist.
}
\description{
Objects of this class contains a reference to an asynchronous
running MS-GF+ process and can be used to query the state of the process, and
import the  results if the process has finished. Instances of this class are
created when the runMSGF() method is called with \code{async=TRUE} on an
msgfPar object.

Unlike regular runMSGF() calls, this does not support batch mode, meaning
that if a more than one raw file is supplied, all but the first are ignored
with a warning.

In order to insulate instances of this class from being corrupted (thus
loosing the reference to the process), all slots are functions and should be
queried as such if needed.
}
\section{Methods (by generic)}{
\itemize{
\item \code{running}: Check whether the MS-GF+ process is still running

\item \code{finished}: Check whether the MS-GF+ process is finished

\item \code{import}: Import the result of the asynchronous MS-GF+ process
}}
\section{Slots}{

\describe{
\item{\code{status}}{Returns the status of the MS-GF+ process; either 'Running' or
'Done'.}

\item{\code{resultFile}}{Returns the location of the result file from the MS-GF+
analysis. WARNING: Checking for the existence of this file is not a safe way
to determine the status of the process, as the file gets written to
continuously.}
}}
\examples{
\dontrun{
parameters <- msgfPar(
                      database=system.file(package='MSGFplus', 'extdata', 'milk-proteins.fasta'),
                      tolerance='20 ppm',
                      instrument='TOF',
                      enzyme='Lys-C'
                     )
asyncMSGF <- runMSGF(parameters, 'file1.mzML', async=TRUE)
while(!running(asyncMSGF)){
    Sys.sleep(1)
}
results <- import(asyncMSGF)
}
}

